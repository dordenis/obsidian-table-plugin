import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";

import { postcssModules, sassPlugin } from "esbuild-sass-plugin";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;
const renamePlugin = () => ({
	name: 'rename-plugin',
	setup(build) {
		build.onEnd(async () => {
			try {
				fs.renameSync(dir + 'main.css', dir + 'styles.css');
			} catch (e) {
				console.error('Failed to rename file:', e);
			}
		});
	},
});

const prod = (process.argv[2] === "production");

const dir = prod ? "./build/" : "./";

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	//outfile: "main.js",
	plugins: [
		sassPlugin({
			filter: /\.module\.scss$/,
			transform: postcssModules({}),
		}),
		sassPlugin(),
		renamePlugin()
	],
	outdir: dir,
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
